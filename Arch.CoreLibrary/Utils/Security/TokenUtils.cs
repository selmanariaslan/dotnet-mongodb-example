using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace Arch.CoreLibrary.Utils.Security
{
    public static class TokenUtils
    {
        public static string GenerateJwtToken(string userId, string userRole, int expires = 7, string secretKey = "Secret", bool isEncryptedSecretKey = true)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var appConfigRoot = ConfigUtils.GetConfigurationRoot();

            string sKey = appConfigRoot.GetSection("Application")[secretKey];
            if (isEncryptedSecretKey)
            {
                sKey = new CryptoUtils().DecryptString(sKey);
            }

            var key = Encoding.ASCII.GetBytes(sKey);
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim(ClaimTypes.Name, userId),
                    new Claim(ClaimTypes.Role, userRole ?? "")
                }),
                Expires = DateTime.UtcNow.AddDays(expires),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }

        public static string GenerateJwtTokenNew(string userId, string userRole, int expires = 7)
        {
            var appConfigRoot = ConfigUtils.GetConfigurationRoot();

            var issuer = appConfigRoot.GetSection("Application")["Issuer"];
            var audience = appConfigRoot.GetSection("Application")["Audience"];
            string sKey = appConfigRoot.GetSection("Application")["Secret"];

            sKey = new CryptoUtils().DecryptString(sKey);


            var key = Encoding.ASCII.GetBytes(sKey);



            var securityKey = new SymmetricSecurityKey(key);
            //var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

            // Now its ime to define the jwt token which will be responsible of creating our tokens
            var jwtTokenHandler = new JwtSecurityTokenHandler();

            // We get our secret from the appsettings
            //var key = Encoding.ASCII.GetBytes(builder.Configuration["Jwt:Key"]);

            // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                //new Claim("Id", "1"),
                new Claim(JwtRegisteredClaimNames.Sub, userId),
                new Claim(JwtRegisteredClaimNames.Email, userRole),
                // the JTI is used for our refresh token which we will be convering in the next video
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            }),
                // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
                // but since this is a demo app we can extend it to fit our current need
                Expires = DateTime.UtcNow.AddHours(6),
                Audience = audience,
                Issuer = issuer,
                // here we are adding the encryption alogorithim information which will be used to decrypt our token
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
            };

            var token = jwtTokenHandler.CreateToken(tokenDescriptor);

            //var jwtToken = jwtTokenHandler.WriteToken(token);
            return jwtTokenHandler.WriteToken(token);
        }
    }
}
